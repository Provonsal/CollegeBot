# coding=utf-8 

import math
from typing import Any, NoReturn
import telebot
from tbot import current_time


class Menu():
    
    def __init__(self, bot, call, pages, section, page, tree, parent):
        self.bot: Any = bot
        self.call: Any = call
        self.chat_id: int = call.message.chat.id
        self.message_id: int = call.message.message_id
        self.section: str = section
        self.pages: tuple = pages
        self.number_in_sqare: tuple = ('1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£','5Ô∏è‚É£','6Ô∏è‚É£','7Ô∏è‚É£','8Ô∏è‚É£','9Ô∏è‚É£','üîü')
        self.buttons_text: tuple = self.pages[1]
        self.buttons_callback: tuple = self.pages[0]
        self.generated_buttons: list = list()
        self.next_menu: Any = telebot.types.InlineKeyboardMarkup(row_width=1)
        self.page: int = page
        self.tree: str = tree
        self.parent: str = parent
        
        self.recursion_button: bool = False
        self.personality: dict = {'Stud': '–°—Ç—É–¥–µ–Ω—Ç–∞\–†–æ–¥–∏—Ç–µ–ª—è', 
                            'Sotr':'–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', 
                            'Abitur':'–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞\–†–æ–¥–∏—Ç–µ–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞'}
    
    def sliding_window_listing(self, menu_page: list, menu: list, right_border: int = 6, left_border: int = 0) -> list:
        
        """
        –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å–∫–æ–ª—å–∑–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ "–°–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞", –¥–ª—è 
        –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—É–≥–ª, –∑–∞–¥–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        """

        for _ in range(self.page):
            menu_page.append(menu[left_border:right_border])
            right_border += 6
            left_border += 6
        return menu_page
    
    def create_buttons(self, menu: list) -> list:

        """
        –§—É–Ω–∫—Ü–∏—è –∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Å–ø–∏—Å–æ–∫ —Å –∏—Ö –∫–æ–ª–ª–±–µ–∫–∞–º–∏, –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–Ω–æ–ø–∫–∏
        –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Å–ø–∏—Å–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–æ–º —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        """

        for text, callback in zip(self.buttons_text, self.buttons_callback):

            # –í–ù–ò–ú–ê–ù–ò–ï, –ï–°–õ–ò –¢–ï–ö–°–¢ –ö–û–õ–õ–ë–ï–ö–ê > 64 –ë–ê–ô–¢ –¢–û –í–´–î–ê–°–¢ –û–®–ò–ë–ö–£
            # –õ–£–ß–®–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ê–ù–ì–õ–ò–ô–°–ö–ò–ï –°–ò–ú–í–û–õ–´, –¢–ê–ö –ö–ê–ö –û–ù–ò –ò–°–ü–û–õ–¨–ó–£–Æ–¢ 1 –ë–ê–ô–¢ –ù–ê –°–ò–ú–í–û–õ
            # –í –¢–û –í–†–ï–ú–Ø –ö–ê–ö –†–£–°–°–ö–ò–ï –ü–û 2 –ë–ê–ô–¢–ê –ù–ê –°–ò–ú–í–û–õ
            

            gggg = f'{self.parent}_{callback}' if self.parent == self.section else f'{self.parent}_{self.section}_{callback}'
            
            
            # —Ä–∞—Å—Å–∫–æ–º–µ–Ω—Ç–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∏–Ω—Ç–æ–º –µ—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–±–µ–∫, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±–µ–∫–∞, –≤–µ—Å –∫–æ–ª–ª–±–µ–∫–∞
            # print(gggg, type(gggg), len(gggg.encode("utf8")), len(self.identity.encode("utf8")), len(callback.encode("utf8")))
            menu.append(telebot.types.InlineKeyboardButton(text, callback_data=gggg))
        return menu

    def control_buttons(self,menu_buttons_pages_generated: list, min_page: int, max_page: int, shablon: str) -> tuple:
        
        """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤ –º–µ–Ω—é
        """

        left = telebot.types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è', callback_data=f'{shablon}``{self.page - 1}')
        right = telebot.types.InlineKeyboardButton(text='‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è', callback_data=f'{shablon}``{self.page + 1}')
        begining = telebot.types.InlineKeyboardButton(text='üîÑ –í –Ω–∞—á–∞–ª–æ üîÑ', callback_data=f'{shablon}``{min_page}')

        if self.page == min_page:

            menu_buttons_pages_generated.append(right)    
        elif self.page == max_page:
            
            menu_buttons_pages_generated.append(left)
            menu_buttons_pages_generated.append(begining)
        else:
            menu_buttons_pages_generated.append(right)
            menu_buttons_pages_generated.append(left)
            
                    
        menu_buttons_pages_generated.append(telebot.types.InlineKeyboardButton(text='üì± –í –º–µ–Ω—é üì±', callback_data='mainmenu'))
        return menu_buttons_pages_generated

    def create_pages(self, min_page: int, max_page: int, menu_page: list) -> tuple:
        
        """
        –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, –∏–º–µ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, 6 –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é 
        –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç–æ –≤—Å–µ –≤ –ª–∏—Å—Ç

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è —á–∏—Å–ª—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        –¢–∞–∫ —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —Å—É—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–∞–º–∏, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–∏ –ø–æ—è–≤—è—Ç—Å—è
        """
        shablon = f'{self.section}' if self.parent == self.section else f'{self.parent}{self.tree}{self.section}'
        
        menu_buttons_pages_generated: list = [v for i,v in enumerate(menu_page[self.page-1]) if i <= 5]
        menu_buttons_pages_generated: tuple = self.control_buttons(menu_buttons_pages_generated, min_page, max_page, shablon)
            
        return menu_buttons_pages_generated

    def add_buttons_to_keyboard(self, menu_buttons_pages_generated: list, next_menu: Any):

        """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        """
        
        for i in menu_buttons_pages_generated:
            
            next_menu.add(i)
        return next_menu
        
    def choose_description(self) -> str:

        """
        –§—É–Ω–∫—Ü–∏—è —Ä–µ—à–∞–µ—Ç –∫–∞–∫—É—é –ø–æ–¥–ø–∏—Å—å –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
        """

        if self.personality.get(self.section) != None:
            self.recursion_button = True
        
        if self.recursion_button:
            text = f'–ú–µ–Ω—é –¥–ª—è {self.personality.get(self.parent)}' if self.personality.get(self.parent) != None else ''
        else:
            text = ''
        return text

    def pager(self) -> Any:
        
        """
        –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç "—Å—Ç—Ä–∞–Ω–∏—Ü—É" –∫–Ω–æ–ø–æ–∫, –≤—ã—è—Å–Ω—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é –∏ —Ç–¥.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–±–æ—Ä–æ–º –Ω—É–∂–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        """

        menu = self.create_buttons(list())
        
        menu_len = len(menu)
        max_page = math.ceil(menu_len / 6)
        min_page = 1
        
        menu_page = self.sliding_window_listing(list(), menu, right_border=6, left_border=0)

        menu_buttons_pages_generated = self.create_pages(min_page, max_page, menu_page)

        next_menu = self.add_buttons_to_keyboard(menu_buttons_pages_generated, self.next_menu)
        
        return next_menu        

    def bot_menu_pager(self) -> NoReturn: 
        
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        """

        text = self.choose_description()

        menu = self.pager()
        
        self.bot.edit_message_text(f'{text}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–º–µ—Ä: {self.number_in_sqare[self.page-1]}',
                              self.chat_id,
                              self.message_id,
                              reply_markup=menu)

    