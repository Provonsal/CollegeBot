# coding=utf-8 

import math
import telebot
from tbot import current_time


class Menu():
    
    def __init__(self, bot, call, pages, section, page, tree, parent):
        self.bot = bot
        self.call = call
        self.chat_id = call.message.chat.id
        self.message_id = call.message.message_id
        self.section = section
        self.pages = pages
        self.number_in_sqare = ('1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£','5Ô∏è‚É£','6Ô∏è‚É£','7Ô∏è‚É£','8Ô∏è‚É£','9Ô∏è‚É£','üîü')
        self.buttons_text = self.pages[1]
        self.buttons_callback = self.pages[0]
        self.generated_buttons = []
        self.next_menu = telebot.types.InlineKeyboardMarkup(row_width=1)
        self.bot = bot
        self.page = page
        self.tree = tree
        self.parent = parent
        
        self.recursion_button = False
        self.personality = {'Stud': '–°—Ç—É–¥–µ–Ω—Ç–∞\–†–æ–¥–∏—Ç–µ–ª—è', 
                            'Sotr':'–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', 
                            'Abitur':'–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞\–†–æ–¥–∏—Ç–µ–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞'}
    
    def sliding_window_listing(self, menu_page, menu, right_border = 6, left_border = 0):
        
        """"""

        for i in range(self.page):
            menu_page.append(menu[left_border:right_border])
            right_border += 6
            left_border += 6
    
    def create_buttons(self, menu):
        for text, callback in zip(self.buttons_text, self.buttons_callback):

            # –í–ù–ò–ú–ê–ù–ò–ï, –ï–°–õ–ò –¢–ï–ö–°–¢ –ö–û–õ–õ–ë–ï–ö–ê > 64 –ë–ê–ô–¢ –¢–û –í–´–î–ê–°–¢ –û–®–ò–ë–ö–£
            # –õ–£–ß–®–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ê–ù–ì–õ–ò–ô–°–ö–ò–ï –°–ò–ú–í–û–õ–´, –¢–ê–ö –ö–ê–ö –û–ù–ò –ò–°–ü–û–õ–¨–ó–£–Æ–¢ 1 –ë–ê–ô–¢ –ù–ê –°–ò–ú–í–û–õ
            # –í –¢–û –í–†–ï–ú–Ø –ö–ê–ö –†–£–°–°–ö–ò–ï –ü–û 2 –ë–ê–ô–¢–ê –ù–ê –°–ò–ú–í–û–õ
            

            gggg = f'{self.parent}_{callback}' if self.parent == self.section else f'{self.parent}_{self.section}_{callback}'
            
            
            # —Ä–∞—Å—Å–∫–æ–º–µ–Ω—Ç–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∏–Ω—Ç–æ–º –µ—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–±–µ–∫, —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±–µ–∫–∞, –≤–µ—Å –∫–æ–ª–ª–±–µ–∫–∞
            # print(gggg, type(gggg), len(gggg.encode("utf8")), len(self.identity.encode("utf8")), len(callback.encode("utf8")))
            menu.append(telebot.types.InlineKeyboardButton(text, callback_data=gggg))
    
    def create_pages(self, min_page, max_page, menu_page):
        
        menu_buttons_pages_generated = [v for i,v in enumerate(menu_page[self.page-1]) if i <= 5]
        
        shablon = f'{self.section}' if self.parent == self.section else f'{self.parent}{self.tree}{self.section}'
        
        if self.page == min_page:
            menu_buttons_pages_generated.append(telebot.types.InlineKeyboardButton(text='‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è', callback_data=f'{shablon}``{self.page + 1}'))    
        elif self.page == max_page:
            
            menu_buttons_pages_generated.append(telebot.types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è', callback_data=f'{shablon}``{self.page - 1}'))
            menu_buttons_pages_generated.append(telebot.types.InlineKeyboardButton(text='üîÑ –í –Ω–∞—á–∞–ª–æ üîÑ', callback_data=f'{shablon}``{min_page}'))
        else:
            menu_buttons_pages_generated.append(telebot.types.InlineKeyboardButton(text='‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è', callback_data=f'{shablon}``{self.page + 1}'))
            menu_buttons_pages_generated.append(telebot.types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è', callback_data=f'{shablon}``{self.page - 1}'))
            
                    
        menu_buttons_pages_generated.append(telebot.types.InlineKeyboardButton(text='üì± –í –º–µ–Ω—é üì±', callback_data='mainmenu'))

    def add_buttons_to_keyboard(self, menu_buttons_pages_generated):
        for i in menu_buttons_pages_generated:
            
            self.next_menu.add(i)
        
    def choose_description(self):
        if self.personality.get(self.section) != None:
            self.recursion_button = True
        
        if self.recursion_button:
            text = f'–ú–µ–Ω—é –¥–ª—è {self.personality.get(self.parent)}' if self.personality.get(self.parent) != None else ''
        else:
            text = ''
        return text

    def pager(self):
        
        menu = self.create_buttons(list())
        
        menu_len = len(menu)
        max_page = math.ceil(menu_len / 6)
        min_page = 1
        
        menu_page = self.sliding_window_listing(list(), menu, right_border=6, left_border=0)

        menu_buttons_pages_generated = self.create_pages(min_page, max_page, menu_page)

        self.add_buttons_to_keyboard(menu_buttons_pages_generated)
        
        return self.next_menu        

    def bot_menu_pager(self): 
        
        text = self.choose_descriptions()

        menu = self.pager()
        
        self.bot.edit_message_text(f'{text}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–º–µ—Ä: {self.number_in_sqare[self.page-1]}',
                              self.chat_id,
                              self.message_id,
                              reply_markup=menu)

    