import math
from typing import Any
import telebot
from text_parser import get_text

class SectionChooser():

    def __init__(self, bot: Any, call: Any, parent: str, section: str, number: int, additional_button_data: Any, address_tree: str, recursive_parent=None, additional_button=False):
        
        """"""
        
        # –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
        self.bot: Any = bot
        self.call: Any = call
        self.page_numbers: int = number
        self.additional_data = additional_button_data
        self.additional_bool: bool = additional_button
        self.tree: str = address_tree
        self.parent: str = parent
        self.recursive_parent: Any = recursive_parent
        self.section: str = section
        self.number: int = number
        
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.back_page: int = math.ceil((number+1)/6)
        self.chat_id: int = call.message.chat.id
        self.message_id: int = call.message.message_id
        
        self.text: str = get_text(number, self.parent if self.recursive_parent == None else self.recursive_parent)
        
        self.url: list = list()
        self.text_url: list = list()
        if isinstance(self.additional_data[0], tuple):
            for i in self.additional_data:
                
                self.url.append(i[1]) # –ò–ó–ú–ï–ù–ò–¢–¨ –ü–†–û–í–ï–†–ö–£ –ù–ê –¢–ò–ü –î–ê–ù–ù–´–•, –ò–ù–ê–ß–ï –ü–†–ò –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –í–í–ï–î–ï–ù–´–• –î–ê–ù–ù–´–•
                                      # –í–°–ï –ü–û–ô–î–ï–¢ –ü–û –ü–ò–ó–î–ï
                self.text_url.append(i[0])
        else:
            self.url: str = self.additional_data[1]
            self.text_url: str = self.additional_data[0]
        
    def get_menu_buttons(self, menu_buttons_generated: list) -> list:
        
        """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç—Å—è, –≤—Å–µ –∫–Ω–æ–ø–∫–∏ - –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏
        """

        if self.additional_bool and not isinstance(self.text_url, list) and not isinstance(self.url, list):
            
            menu_buttons_generated.append(telebot.types.InlineKeyboardButton(self.text_url, url=self.url))
        else:
            for text, url in zip(self.text_url, self.url):
                
                menu_buttons_generated.append(telebot.types.InlineKeyboardButton(text, url=url))
        return menu_buttons_generated

    def add_buttons(self, menu_buttons_generated: list, next_menu: Any) -> Any:
        
        """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∫–Ω–æ–ø–∫–∏, —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –≤ –ª–∏—Å—Ç–µ, –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        
        for i in menu_buttons_generated:

            next_menu.add(i)
        return next_menu
        
    def create_buttons(self) -> Any:
        
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """

        next_menu: Any = telebot.types.InlineKeyboardMarkup(row_width=1)
        
        menu_buttons_generated: list = self.get_menu_buttons(list())
        
        call_back_data: str = f"{self.parent}``{self.back_page}" if len(self.tree)==1 else f"{self.parent}{self.tree}``{self.back_page}"
        
        menu_buttons_generated.append(telebot.types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ üîô', callback_data=call_back_data)) 
        menu_buttons_generated.append(telebot.types.InlineKeyboardButton(text='üì± –í –º–µ–Ω—é üì±', callback_data='mainmenu'))
        
        next_menu: Any = self.add_buttons(menu_buttons_generated, next_menu) 
        
        return next_menu
        
    def section_selector(self):
        
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–º —Å–∞–º—ã–º "–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç" —Ä–∞–∑–¥–µ–ª, –º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏
        –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–µ –º–µ–Ω—é –∏ –≥–ª–∞–≤ –º–µ–Ω—é
        """

        self.bot.edit_message_text(
                                    self.text,
                                    self.chat_id,
                                    self.message_id,
                                    reply_markup=self.create_buttons()
                                    )